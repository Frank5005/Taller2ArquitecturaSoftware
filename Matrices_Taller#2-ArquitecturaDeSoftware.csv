Criterio,SOLID,Arquitectura en Capas,En temas
Definición,"5 principios de codificación que contribuyen a un desarrollo de software modular, flexible y mantenible","Divide el sistema de software en capas, segregando responsabilidades y limitando el conocimiento y la comunicación entre ellas como sea necesario","B: Python, Django                                                           F: Flutter, Dart                                                          I: Websockets                                                           DB: MySQL"
S: Single responsability,Una clase solo deberia tener una unica razón para cambiar. Una única y definida responsabilidad,"Cada capa del sistema cumple con un grupo de responsabilidades particulares, independientes a las demas capas","Django maneja la lógica del negocio, Flutter se ocupa de la presentación a usuario (UI), WebSockets gestiona la comunicación en tiempo real y MySQL se enfoca en la persistencia de los datos"
O: Open/closed principle,"Entidades de software del sistema deberían estar abiertos a la extensión, cerrados a la modificación",la segregación de las capas permite que una sea extensible sin que afecte la implementación y el comportamiento de las demás ,"Django es fácilmente extensible con nuevos módulos o funcionalidades mediante aplicaciones adicionales. Flutter permite agregar nuevas vistas o funcionalidades sin alterar las existentes. WebSockets puede ser ampliado con nuevas rutas de comunicación en tiempo real
"
L: principio de Liskov,Las subclases deben poder sustituir a sus clases base sin afectar el correcto funcionamiento del sistema,"Respetando las interfaces que comunican las capas del sistema, el cambio en la implementación de una capa no debe cambiar su interacción con las demás ni el funcionamiento general del sistema","Django facilita la implementación del principio a través del uso de su ORM. Flutter puede manejar diferentes implementaciones de interfaz de usuario, y WebSockets puede manejar diferentes eventos o formatos de datos sin alterar la conexión subyacente"
I: segregación de interfaces,Las clases no deben depender de interfaces que no utilizan,"Para asegurar la segregación entre las capas, cada capa solo tiene interfaces bien definidas con otras capas con las que interactúe","Flutter y Django están bien segregados por la comunicación mediante WebSockets, que actúan como un intermediario en tiempo real, evitando que el frontend dependa de detalles específicos de la lógica de negocio del backend"
D: Inversión de dependencias,"las clases no deben depender de implementaciones concretas de otros componentes del sistema, sino de abstracciones de estos",La comunicación e interacción de las capas se debe dar por medio de interfaces o abstracciones no dependiendo de implementaciones concretas,"Flutter  depende de abstracciones de la lógica de negocio a través de WebSockets, y Django depende de abstracciones de persistencia mediante su ORM, que interactúa con MySQL"
